language: cpp

script:
 - "bash -ex .travis-ci.sh"

matrix:
  fast_finish: true
  include:
    - compiler: clang
      env: TASK='compile'
    - compiler: gcc
      env: TASK='compile'
    - compiler: gcc
      env: TASK='coverage'
    - compiler: gcc
      env: TASK='coverity'
    - env: TASK='doxygen'
    - env: TASK='lint'
    - env: TASK='check-licences'
    - env: TASK='jshint'
  allow_failures:
    - compiler: gcc
      env: TASK='coverage'
    - compiler: gcc
      env: TASK='coverity'

env:
  global:
   # -- BEGIN Coverity Scan ENV
   - COVERITY_SCAN_BUILD_COMMAND_PREPEND="autoreconf -i && ./configure --enable-ja-rule"
   # The build command with all of the arguments that you would apply to a manual `cov-build`
   # Usually this is the same as STANDARD_BUILD_COMMAND, exluding the automated test arguments
   - COVERITY_SCAN_BUILD_COMMAND="make"
   # Name of the project
   - COVERITY_SCAN_PROJECT_NAME="$TRAVIS_REPO_SLUG"
   # Email address for notifications related to this build
   - COVERITY_SCAN_NOTIFICATION_EMAIL="ola-coverity@pjnewman.co.uk"
   # Regular expression selects on which branches to run analysis
   # Be aware of quotas. Do not run on every branch/commit
   - COVERITY_SCAN_BRANCH_PATTERN=".*"
   # COVERITY_SCAN_TOKEN via "travis encrypt" using the repo's public key
   - secure: "U+NmPtScHZ1NLmkDrzpqApHmJvELV44cXgjQsxA8N8xIATckbs+DrmWSNeECENyvuOPz+nPzglSgBvJtejf97jYJIIwAExq5TJMUAIPFS6KU3mohODW2PZSoVoUyJPzFIlhzcELQgONI+ILLm29lNdQNb7GFUVtO6+jS10AFtWY="
   # -- END Coverity Scan ENV

cache: apt

before_install:
 - sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
 - sudo add-apt-repository ppa:h-rayflood/gcc-upper -y
 - sudo add-apt-repository ppa:h-rayflood/llvm-upper -y
 - sudo add-apt-repository ppa:ubuntu-cloud-archive/icehouse-staging -y
 - sudo apt-get update -qq
 - sudo apt-get install -qq protobuf-compiler libprotobuf-lite7 libprotobuf-dev libprotoc-dev bison flex libftdi-dev libftdi1 libusb-1.0-0-dev liblo-dev libavahi-client-dev uuid-dev libcppunit-dev libcppunit-1.12-1 libncurses5-dev python-protobuf libmicrohttpd-dev
#Coverity doesn't work with g++ 5, so only upgrade to g++ 4.9 for that
 - if [ "$TASK" != "coverity" -a "$CXX" = "g++" ]; then sudo apt-get install -qq g++-5; fi
 - if [ "$TASK" != "coverity" -a "$CXX" = "g++" ]; then export CXX="g++-5" CC="gcc-5"; fi
 - if [ "$TASK" = "coverity" -a "$CXX" = "g++" ]; then sudo apt-get install -qq g++-4.9; fi
 - if [ "$TASK" = "coverity" -a "$CXX" = "g++" ]; then export CXX="g++-4.9" CC="gcc-4.9"; fi
#Remove the old g++/gcc to ensure we're using the latest ones
 - if [ "$CXX" = "g++-4.9" -o "$CXX" = "g++-5" ]; then sudo rm /usr/bin/g++; sudo rm /usr/bin/gcc; fi
#Install latest clang if we're compiling with clang
 - if [ "$CXX" = "clang++" ]; then sudo apt-get install -qq clang-3.6; fi
 - if [ "$CXX" = "clang++" ]; then export CXX="clang++-3.6" CC="clang-3.6"; fi
#Remove the old clang to ensure we're using the latest ones
 - if [ "$CXX" = "clang++-3.6" ]; then sudo rm /usr/local/clang-3.4/bin/clang; sudo rm /usr/local/clang-3.4/bin/clang++; fi
#Report the compiler version
 - $CXX --version
#Install coveralls if required
 - if [ "$TASK" = "coverage" ]; then sudo pip install -qq cpp-coveralls; fi
#Install doxygen if required
 - if [ "$TASK" = "doxygen" ]; then sudo apt-get install -qq doxygen graphviz; fi
#Install grunt if required
 - if [ "$TASK" = "jshint"]; then sudo npm install -g grunt-cli; fi

after_success:
  - if [ "$TASK" = "coverity" ]; then cat /home/travis/build/${TRAVIS_REPO_SLUG}/cov-int/scm_log.txt; fi
  - if [ "$TASK" = "coverage" ]; then coveralls --gcov /usr/bin/gcov-5 -b . -E '.*Test\.cpp$' -E '.*\.pb\.cc$' -E '.*\.pb\.cpp$' -E '.*\.pb\.h$' -E '.*\.yy\.cpp$' -E '.*\.tab\.cpp$' -E '.*\.tab\.h$' -E '.*/doxygen/examples.*$' --gcov-options '\-lp' > /dev/null; fi

notifications:
  irc:
    channels:
     - "chat.freenode.net#openlighting"
    on_success: change
    on_failure: change
