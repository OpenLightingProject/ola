/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Library General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * SLP.proto
 * Defines the protocol buffers used to talk to the SLP Server.
 * Copyright (C) 2012 Simon Newton
 */

package ola.slp.proto;

option cc_generic_services = false;
option py_generic_services = true;
option java_generic_services = true;

// Generic Ack Message
message Ack {}

message ServiceRequest {
  required string service_type = 1;
  repeated string scope = 2;
}

message URLEntry {
  required string url = 1;
  required uint32 lifetime = 2;
  // add auth block here
}

message ServiceReply {
  repeated URLEntry url_entry = 1;
}

message ServiceRegistration {
  required string url = 1;  // e.g. service:foo://localhost:1234
  required uint32 lifetime = 2;
  repeated string scope = 3;

  /**
   * If false, any registrations are removed when the clients disconnects.
   */
  optional bool persistent = 4 [default = false];
}

message ServiceDeRegistration {
  required string url = 1;
  repeated string scope = 2;
}

message ServiceAck {
  // we don't use enums here because we may want to pass back errors we don't
  // understand.
  required uint32 error_code = 1;
};

message ServerInfoRequest {}

message ServerInfoReply {
  optional bool da_enabled = 1;
  optional uint32 port = 2;
  repeated string scope = 3;
};

// Services

// RPCs handled by the SLP Server
service SLPService {
  // find a service
  rpc FindService(ServiceRequest) returns (ServiceReply);

  // register a service
  rpc RegisterService(ServiceRegistration) returns (ServiceAck);

  rpc DeRegisterService(ServiceDeRegistration) returns (ServiceAck);

  rpc GetServerInfo(ServerInfoRequest) returns (ServerInfoReply);
}

// RPCs handled by the OLA Client
service SLPClientService {
  rpc NewService(ServiceRegistration) returns (Ack);
}
