  int lock_fd = open(lock_file.c_str(), O_RDWR | O_CREAT | O_EXCL,
    if (!(ifrcopy.ifr_flags & IFF_UP)) {
    if (ifrcopy.ifr_flags & IFF_LOOPBACK) {
    if (ifrcopy.ifr_flags & IFF_BROADCAST) {
      string("  00 48 65 6c  .Hel\n"
 * Renamed fempto(sic) to femto in the RDM code (C++ and Python)
 * Renamed terra(sic) to tera in the RDM code (C++ and Python)
 * Renamed protocol convertor(sic) to protocol converter in the RDM code (C++
 * Renamed valiator(sic) to validator, incomming(sic) to incoming, mimimun(sic)
   to minimum and overiding(sic) to overriding, all of which may or may not
        /^(?:([0-9]{1,3})(?:\s(THRU)\s(?:([0-9]{1,3}))?)?(?:\s(@)\s(?:([0-9]{1,3}|FULL))?)?)/;
 *   channel_range ::= "ALL" | "*" | channel "THRU" channel | channel > channel
      /(?:([0-9]{1,3})(?:\s+THRU\s+([0-9]{0,3}))?)\s+@\s+([0-9]{0,3})$/);
     /(?:([0-9]{1,3})(?:\s+THRU\s+([0-9]{0,3}))?)(?:\s+@\s+([0-9]{0,3}))?$/);
  str = str.replace('>', 'THRU');
                    ' THRU ' + ola.common.DmxConstants.MAX_CHANNEL_NUMBER);
                    ' THRU ' + ola.common.DmxConstants.MAX_CHANNEL_NUMBER);
    // If it's the T or > keys, autocomplete 'THRU'
         case 'U': // THRU
  var values = ['7', '8', '9', ' THRU ', '4', '5', '6', ' @ ', '1', '2', '3',
    // This is true iff all fields in a group are of a fixed size and the
    <button ng-click="input(' THRU ')" class="btn btn-keypad">THRU</button>
      if(/android|avantgo|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|e\-|e\/|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(di|rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|xda(\-|2|g)|yas\-|your|zeto|zte\-/i.test(a.substr(0,4)))
      state(AVAHI_ENTRY_GROUP_UNCOMMITED),
    case AVAHI_ENTRY_GROUP_UNCOMMITED:
    if (iter->second->state == AVAHI_ENTRY_GROUP_UNCOMMITED) {
    iter->second->state = AVAHI_ENTRY_GROUP_UNCOMMITED;
    case AVAHI_ENTRY_GROUP_UNCOMMITED:
      return "AVAHI_ENTRY_GROUP_UNCOMMITED";
      PRE_SOM,
      uint8_t som;
    static const uint8_t SOM = 0xa5;
    PRE_SOM,
    uint8_t som;
  static const uint8_t SOM = 0x7e;
  frame[0] = 0x7e;  // som
  frame[0] = 0xa5;  // som
  frame[0] = 0x7e;  // som
const uint8_t BaseRobeWidget::SOM;
      m_state(PRE_SOM),
  header->som = SOM;
  uint8_t crc = SOM + packet_type + (length & 0xFF) + ((length & 0xFF00) >> 8);
    case PRE_SOM:
        m_descriptor->Receive(&m_header.som, 1, count);
      } while (m_header.som != SOM);
        m_state = PRE_SOM;
      m_crc = SOM + m_header.packet_type + m_header.len + m_header.len_hi;
        m_state = PRE_SOM;
      m_state = PRE_SOM;
      m_state(PRE_SOM),
  header->som = SOM;
    case PRE_SOM:
        m_descriptor->Receive(&m_header.som, 1, count);
      } while (m_header.som != SOM);
        m_state = PRE_SOM;
      m_state = PRE_SOM;
        '%s attempted to get %s which wasn\'t declared' %
        '%s attempted to set %s which wasn\'t declared' %
        'min': numpy.amin(array),
        /^(?:([0-9]{1,3})(?:\s(THRU)\s(?:([0-9]{1,3}))?)?(?:\s(@)\s(?:([0-9]{1,3}|FULL))?)?)/;
            $scope.input(' THRU ');
  manufacturer_name: "ALS Stanislaw Binkiewicz"
  manufacturer_name: "Guangzhou Litewise Lighting Equipments Co., Ltd. dba \"EK Lights\""
  manufacturer_name: "ARRI -- Arnold & Richter Cine Technik GmbH & Co. Betriebs KG"
  manufacturer_name: "SRM Technik GmbH"
  manufacturer_name: "medien technik cords"
